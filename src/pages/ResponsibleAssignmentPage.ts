import { Page, Locator, expect } from "@playwright/test";

export class ResponsibleAssignmentPage {
  private page: Page;
  private contractLink: Locator;
  private operationsButton: Locator;
  private assignResponsibleOption: Locator;
  private executeButton: Locator;
  private responsibleDropdown: Locator;
  private confirmResponsibleButton: Locator;

  constructor(page: Page) {
    this.page = page;
    this.contractLink = page.getByRole("link", { name: "–ê–ê" });
    this.operationsButton = page.getByRole("button", { name: "–û–ø–µ—Ä–∞—Ü–∏–∏" });
    this.assignResponsibleOption = page.getByText("–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ");
    this.executeButton = page.getByRole("button", { name: "–í—ã–ø–æ–ª–Ω–∏—Ç—å" });
    this.responsibleDropdown = page.getByRole("combobox", {
      name: "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ",
    });
    this.confirmResponsibleButton = page.getByRole("button", {
      name: "–£–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ",
    });
  }

  async assignResponsible(contractNumber: string) {
    console.log(`üîπ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–æ–≥–æ–≤–æ—Ä: ${contractNumber}`);

    await this.page.getByRole("link", { name: contractNumber }).click();
    await this.page.waitForLoadState("networkidle");

    console.log("üîπ –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é '–û–ø–µ—Ä–∞—Ü–∏–∏'...");
    await this.operationsButton.click();

    console.log("üîπ –í—ã–±–∏—Ä–∞–µ–º '–ù–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ'...");
    await this.assignResponsibleOption.click();

    console.log("üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—ã–±–æ—Ä...");
    await this.executeButton.click();

    console.log("üîπ –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–∏—Ü...");
    await this.responsibleDropdown.click();
    await this.page.waitForTimeout(3000);

    const visibleDropdown = this.page
      .locator(".el-select-dropdown")
      .filter({ has: this.page.locator(":visible") });
    await visibleDropdown.locator(".el-select-dropdown__item").first().click();

    console.log("üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ...");
    await Promise.all([
      this.confirmResponsibleButton.click(),
      this.page.waitForResponse(
        (response) =>
          response.url().includes("/api/v1/contract/set_responsible") &&
          response.status() === 200
      ),
    ]);
    console.log("‚úÖ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–∑–Ω–∞—á–µ–Ω.");
  }

  async reassignResponsible(contractNumber: string, employeeName: string) {
    console.log(
      `üîπ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞: ${contractNumber}`
    );

    await this.page.getByRole("link", { name: contractNumber }).click();
    await this.page.waitForLoadState("networkidle");

    await this.operationsButton.click();
    await this.assignResponsibleOption.click();
    await this.executeButton.click();

    await this.responsibleDropdown.click();
    await this.page.getByRole("option", { name: employeeName }).click();

    await Promise.all([
      this.confirmResponsibleButton.click(),
      this.page.waitForResponse(
        (res) =>
          res.url().includes("/api/v1/contract/set_responsible") &&
          res.status() === 200
      ),
    ]);

    console.log(`‚úÖ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π \"${employeeName}\" —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω.`);
  }
}
