import { Page, Locator, expect } from "@playwright/test";

export class CollectionStrategyPage {
  private page: Page;
  private strategyMenu: Locator;
  private assignProcessButton: Locator;
  private processDropdown: Locator;
  private processOCB: Locator;
  private assignToSelectedContractsButton: Locator;
  private nextPageButton: Locator;
  private selectedContractNumber: string | null = null;

  constructor(page: Page) {
    this.page = page;
    this.strategyMenu = page.locator(
      "span.menu-item-title:has-text('–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–∑—ã—Å–∫–∞–Ω–∏—è')"
    );
    this.assignProcessButton = page.locator(
      "button:has-text('–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å')"
    );
    this.processDropdown = page.getByRole("combobox", {
      name: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å",
    });
    this.assignToSelectedContractsButton = page.locator(
      "button:has-text('–ù–∞–∑–Ω–∞—á–∏—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–æ–≥–æ–≤–æ—Ä–∞–º')"
    );
    this.processOCB = page.getByRole("option", {
      name: "–í–∑—ã—Å–∫–∞–Ω–∏–µ –û–°–í",
      exact: true,
    });
    this.nextPageButton = page
      .locator(".el-pagination .btn-next:not([disabled])")
      .first();
  }

  async goToStrategyPage() {
    console.log("üîπ –ü–µ—Ä–µ—Ö–æ–¥ –≤ '–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤–∑—ã—Å–∫–∞–Ω–∏—è'...");
    await this.strategyMenu.click();
    await this.page.waitForLoadState("networkidle");
  }

  async filterByOrganization() {
    console.log("üîπ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ '–¢—É—Ä–±–æ–∑–∞–π–º'...");

    await this.page.getByRole("combobox", { name: "–ö–æ–ª–æ–Ω–∫–∞" }).click();
    await this.page.getByRole("option", { name: "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è" }).click();
    await this.page.getByRole("combobox", { name: "–í–∏–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏" }).click();
    await this.page.getByRole("option", { name: "–°–æ–¥–µ—Ä–∂–∏—Ç" }).click();
    await this.page
      .getByRole("textbox", { name: "–ó–Ω–∞—á–µ–Ω–∏–µ" })
      .fill("–¢—É—Ä–±–æ–∑–∞–π–º");
    await this.page.getByRole("button", { name: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" }).click();

    await this.page.waitForResponse(
      (response) =>
        response.url().includes("/api/v1/importedcontractpackage/table") &&
        response.status() === 200
    );
    await this.page.waitForLoadState("networkidle");
    await this.page.waitForTimeout(3000);
  }

  async selectContract() {
    console.log("üîπ –ò—â–µ–º –¥–æ–≥–æ–≤–æ—Ä c '–ê–ê'...");

    await this.filterByOrganization();
    await this.searchContract(
      (contractNumber, status) =>
        contractNumber.startsWith("–ê–ê") &&
        status !== "–ö–ª–∏–µ–Ω—Ç –±–∞–Ω–∫—Ä–æ—Ç" &&
        status !== "–°—Ç–∞—Ç—É—Å –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –Ω–µ —è—Å–µ–Ω"
    );
  }

  async selectContractForPurchased() {
    //console.log("üîπ –ò—â–µ–º –¥–æ–≥–æ–≤–æ—Ä –¥–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö (–±–µ–∑ '–ê–ê')...");

    // await this.filterByOrganization();
    await this.searchContract(
      (contractNumber, status) =>
        !contractNumber.startsWith("–ê–ê") &&
        status !== "–ö–ª–∏–µ–Ω—Ç –±–∞–Ω–∫—Ä–æ—Ç" &&
        status !== "–°—Ç–∞—Ç—É—Å –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –Ω–µ —è—Å–µ–Ω"
    );
  }

  private async searchContract(
    condition: (contractNumber: string, status: string) => boolean
  ) {
    let currentPage = 1;

    while (true) {
      await this.page.waitForSelector("tbody tr", {
        state: "visible",
        timeout: 10000,
      });
      const rows = await this.page.locator("tbody tr").all();

      for (const row of rows) {
        const contractNumberElement = row.locator("td:nth-child(2) span");
        const statusElement = row.locator("td:nth-child(7)");

        const contractNumber =
          (await contractNumberElement.textContent())?.trim() || "";
        const status = (await statusElement.textContent())?.trim() || "";

        console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–≥–æ–≤–æ—Ä: ${contractNumber} | –°—Ç–∞—Ç—É—Å: ${status}`);

        if (condition(contractNumber, status)) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–æ–≥–æ–≤–æ—Ä: ${contractNumber}`);

          await contractNumberElement.scrollIntoViewIfNeeded();
          const checkbox = row.locator(
            ".table-select-checkbox .el-checkbox__inner"
          );
          await checkbox.click();
          await this.page.waitForTimeout(1000);

          this.selectedContractNumber = contractNumber;
          return;
        }
      }

      if (await this.nextPageButton.isVisible()) {
        console.log(`üîπ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${currentPage + 1}...`);
        await this.nextPageButton.click();
        await this.page.waitForTimeout(2000);
      } else {
        throw new Error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–æ–≥–æ–≤–æ—Ä –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü!");
      }

      currentPage++;
    }
  }

  async getSelectedContractNumber(): Promise<string> {
    if (!this.selectedContractNumber) {
      throw new Error("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω –¥–æ–≥–æ–≤–æ—Ä!");
    }
    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –¥–æ–≥–æ–≤–æ—Ä: ${this.selectedContractNumber}`);
    return this.selectedContractNumber;
  }

  async assignProcess(processName: string) {
    console.log(`üîπ –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å: ${processName}`);

    await this.assignProcessButton.click();
    await this.processDropdown.click();
    await this.processOCB.click();
    await this.assignToSelectedContractsButton.click();
    console.log("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
  }

  async assignProcessPurchased() {
    console.log("üîπ –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å '–í–∑—ã—Å–∫–∞–Ω–∏–µ –û–°–í –¥–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö'...");

    await this.assignProcessButton.click();
    await this.processDropdown.click();

    const processForPurchased = this.page.getByRole("option", {
      name: "–í–∑—ã—Å–∫–∞–Ω–∏–µ –û–°–í –¥–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö",
      exact: true,
    });

    await processForPurchased.click();
    await this.assignToSelectedContractsButton.click();

    console.log("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å '–í–∑—ã—Å–∫–∞–Ω–∏–µ –û–°–í –¥–ª—è –∫—É–ø–ª–µ–Ω–Ω—ã—Ö' —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω!");
  }
}
