import { Page, Locator, expect } from "@playwright/test";

export class ContractsPage {
  private page: Page;
  private contractsTable: Locator;
  private columnFilter: Locator;
  private contractNumberOption: Locator;
  private valueInput: Locator;
  private applyFilterButton: Locator;

  constructor(page: Page) {
    this.page = page;
    this.contractsTable = page.locator(".el-table__row td:nth-child(3) a");
    this.columnFilter = page.getByRole("combobox", { name: "–ö–æ–ª–æ–Ω–∫–∞" });
    this.contractNumberOption = page.getByRole("option", {
      name: "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞",
      exact: true,
    });
    this.valueInput = page.getByRole("textbox", { name: "–ó–Ω–∞—á–µ–Ω–∏–µ" });
    this.applyFilterButton = page.getByRole("button", { name: "–ü—Ä–∏–º–µ–Ω–∏—Ç—å" });
  }

  async verifyContractIsNotInStrategy() {
    console.log("üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ–≥–æ–≤–æ—Ä –∏—Å—á–µ–∑ –∏–∑ '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–∑—ã—Å–∫–∞–Ω–∏—è'...");
    await this.page.reload();
    await this.page.waitForLoadState("networkidle");

    if (await this.contractsTable.isVisible()) {
      return !(await this.contractsTable.textContent())?.includes(
        "–í—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä"
      );
    }
    return true;
  }

  async searchContractByNumber(contractNumber: string) {
    await this.page.goto("https://lc.test5.mmk.local/contracts");
    await this.page.waitForLoadState("networkidle");

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    await this.columnFilter.click();
    await this.contractNumberOption.click();

    // –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
    await this.valueInput.fill(contractNumber);

    await this.applyFilterButton.click();

    await this.page.waitForTimeout(2000);
    await this.page.waitForLoadState("networkidle");
  }

  async verifyContractIsLoaded(contractNumber: string) {
    console.log(
      `üîπ –ò—â–µ–º –¥–æ–≥–æ–≤–æ—Ä —Å –Ω–æ–º–µ—Ä–æ–º: ${contractNumber} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–î–æ–≥–æ–≤–æ—Ä—ã'...`
    );

    await this.searchContractByNumber(contractNumber);

    // –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
    const contractLocator = this.page.getByRole("link", {
      name: contractNumber,
    });

    console.log(
      `üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –¥–æ–≥–æ–≤–æ—Ä ${contractNumber} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...`
    );

    //  ‚úÖ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞
    await expect(contractLocator).toBeVisible({ timeout: 15000 });

    console.log(`‚úÖ –î–æ–≥–æ–≤–æ—Ä ${contractNumber} —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω!`);
    return true;
  }

  async selectContractAndOpen(contractNumber: string) {
    console.log(`üîπ –ò—â–µ–º –¥–æ–≥–æ–≤–æ—Ä –ø–æ –Ω–æ–º–µ—Ä—É: ${contractNumber}...`);

    await this.searchContractByNumber(contractNumber);

    await this.applyFilterButton.click();
    console.log("‚úÖ –§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω—ë–Ω!");

    await this.page.waitForLoadState("networkidle");
    await this.page.waitForTimeout(500);

    // üîπ –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–≥–æ–≤–æ—Ä –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–π
    const contractLink = this.page.getByRole("link", { name: contractNumber });

    if ((await contractLink.count()) > 0) {
      await contractLink.click();
      console.log(`‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫—É –¥–æ–≥–æ–≤–æ—Ä–∞ ${contractNumber}`);
    } else {
      throw new Error(`‚ùå –û—à–∏–±–∫–∞: –î–æ–≥–æ–≤–æ—Ä ${contractNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
    }
  }
}
