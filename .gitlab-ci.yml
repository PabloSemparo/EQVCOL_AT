workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: always

stages:
  - test

# -------------------------------------------
# üîπ –¶–µ–ø–æ—á–∫–∞ 1
chain1_tests:
  stage: test
  image: mcr.microsoft.com/playwright:focal
  tags:
    - docker
  script:
    - npm ci
    - npx playwright install --with-deps
    - "echo –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: –¶–µ–ø–æ—á–∫–∞ 1"
    - npx playwright test tests/tests/chain1.spec.ts
  artifacts:
    when: always
    paths:
      - test-results/
      - playwright-report/
    reports:
      junit: test-results/results-chain1.xml

# -------------------------------------------
# üîπ –¶–µ–ø–æ—á–∫–∞ 2
chain2_tests:
  stage: test
  image: mcr.microsoft.com/playwright:focal
  tags:
    - docker
  script:
    - npm ci
    - npx playwright install --with-deps
    - "echo –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: –¶–µ–ø–æ—á–∫–∞ 2"
    - npx playwright test tests/tests/chain2.spec.ts
  artifacts:
    when: always
    paths:
      - test-results/
      - playwright-report/
    reports:
      junit: test-results/results-chain2.xml

# -------------------------------------------
# üîπ –¶–µ–ø–æ—á–∫–∞ 4
chain4_tests:
  stage: test
  image: mcr.microsoft.com/playwright:focal
  tags:
    - docker
  script:
    - npm ci
    - npx playwright install --with-deps
    - "echo –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: –¶–µ–ø–æ—á–∫–∞ 4"
    - npx playwright test tests/tests/chain4.spec.ts
  artifacts:
    when: always
    paths:
      - test-results/
      - playwright-report/
    reports:
      junit: test-results/results-chain4.xml

# -------------------------------------------
# üü¶ –¶–µ–ø–æ—á–∫–∞ 1 (–∫—É–ø–ª–µ–Ω–Ω—ã–µ)
chain1_purchased_tests:
  stage: test
  image: mcr.microsoft.com/playwright:focal
  tags:
    - docker
  script:
    - npm ci
    - npx playwright install --with-deps
    - "echo –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: –¶–µ–ø–æ—á–∫–∞ 1 (–ø–æ–∫—É–ø–Ω—ã–µ)"
    - npx playwright test tests/tests/chain1_purchased.spec.ts
  artifacts:
    when: always
    paths:
      - test-results/
      - playwright-report/
    reports:
      junit: test-results/results-chain1-purchased.xml

# -------------------------------------------
# üü¶ –¶–µ–ø–æ—á–∫–∞ 2 (–∫—É–ø–ª–µ–Ω–Ω—ã–µ)
chain2_purchased_tests:
  stage: test
  image: mcr.microsoft.com/playwright:focal
  tags:
    - docker
  script:
    - npm ci
    - npx playwright install --with-deps
    - "echo –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: –¶–µ–ø–æ—á–∫–∞ 2 (–ø–æ–∫—É–ø–Ω—ã–µ)"
    - npx playwright test tests/tests/chain2_purchased.spec.ts
  artifacts:
    when: always
    paths:
      - test-results/
      - playwright-report/
    reports:
      junit: test-results/results-chain2-purchased.xml

# -------------------------------------------
# üü¶ –¶–µ–ø–æ—á–∫–∞ 4 (–∫—É–ø–ª–µ–Ω–Ω—ã–µ)
chain4_purchased_tests:
  stage: test
  image: mcr.microsoft.com/playwright:focal
  tags:
    - docker
  script:
    - npm ci
    - npx playwright install --with-deps
    - "echo –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: –¶–µ–ø–æ—á–∫–∞ 4 (–ø–æ–∫—É–ø–Ω—ã–µ)"
    - npx playwright test tests/tests/chain4_purchased.spec.ts
  artifacts:
    when: always
    paths:
      - test-results/
      - playwright-report/
    reports:
      junit: test-results/results-chain4-purchased.xml
